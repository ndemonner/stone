#!/usr/bin/env ruby

require 'fileutils'
require 'rubygems'

def usage
  puts <<-EOS
  
  
    stone-gen model


  EOS
end

def model_usage
  puts <<-EOS
  
  
    stone-gen model ModelName field:type field:type ...

    e.g. stone-gen model Author name:string street_number:fixnum

    Works just like all the other model generators out there, 
    just remember that Stone only accepts Ruby primitives for 
    field types (String, Fixnum, etc).


  EOS
end

def gen_model(args)
  model_name = args.first.camelcase
  file_name = model_name.snakecase
  args.shift
  fields = Hash[*(args.map{|a| a.split(":") }.flatten)]
  model_str = "class #{model_name}\n  include Stone::Resource\n\n"
  for field in fields
    unless field.last == "datetime"
      model_str << "  field :#{field.first}, #{field.last.capitalize}\n"
    else
      model_str << "  field :#{field.first}, DateTime\n"
    end
  end
  model_str << "end"
  FileUtils.mkdir(File.join(Dir.pwd, "app/models")) \
    unless File.exists?(File.join(Dir.pwd, "app/models"))
  File.open(File.join(Dir.pwd, "app/models/#{file_name}.rb"), "w") do |file|
    file << model_str
  end
  puts "Model: #{model_name} created."
end

if ARGV.empty?
  usage
else
  args = ARGV
  case args.first
  when "model"
    args.shift
    if args.empty?
      model_usage
    else  
      gen_model(args)
    end
  else
    usage
  end
end